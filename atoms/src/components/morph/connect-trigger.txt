"use client";
import { type ReactElement, cloneElement, isValidElement } from "react";
import React from "react";

import { useMorph } from "./morph-provider";
import { ConnectionContext } from "./connection-context";

export interface ConnectionCallbacks {
  authorized?: (connectionData: any) => void;
  onConnectionDataChange?: (connectionData: any) => void;
}

export interface ConnectTriggerProps<T = HTMLElement> {
  children: ReactElement<{
    onClick?: (e: React.MouseEvent<T>) => void;
    onKeyDown?: (e: React.KeyboardEvent<T>) => void;
  }>;
  sessionToken?: string;
  connectionCallbacks?: ConnectionCallbacks & {
    onStart: () => void;
    onError: (error: any) => void;
  };
  mode?: "popup" | "redirect";
  redirectUrl?: string;
  settings?: Record<string, any>;
}

function BaseTrigger<T = HTMLElement>({
  children,
  action,
  sessionToken: propSessionToken,
  connectionCallbacks: propConnectionCallbacks,
  mode: propMode = "popup",
  redirectUrl: propRedirectUrl,
  settings: propSettings,
}: ConnectTriggerProps<T> & { action: "authorize" | "delete" }): JSX.Element {
  const morph = useMorph();
  const connectionContext = React.useContext(ConnectionContext);
  console.log("connectionContext", connectionContext);
  // Use context values if available, otherwise use props
  const sessionToken = connectionContext?.sessionToken ?? propSessionToken;
  const settings = connectionContext?.settings ?? propSettings;
  const mode = connectionContext?.mode ?? propMode;
  const redirectUrl = connectionContext?.redirectUrl ?? propRedirectUrl;
  const connectionCallbacks =
    connectionContext?.connectionCallbacks ?? propConnectionCallbacks;
  console.log("redirectUrl", redirectUrl);
  if (!sessionToken) {
    throw new Error(
      "sessionToken is required either through props or ConnectionForm context"
    );
  }

  const onClick = async () => {
    if (!morph.connections)
      throw new Error("Missing morph.connections() method");
    const connection = morph.connections({ sessionToken });

    if (action === "authorize") {
      connectionCallbacks?.onStart();
      const { data, error } = await connection.authorize({
        redirectUrl,
        settings,
      });

      if (error) {
        connectionCallbacks?.onError?.(error);
        return;
      }
      console.log({ data, error });
      console.log(data.authorizationUrl);

      if (data?.authorizationUrl) {
        if (mode === "redirect") {
          // Redirect to authorization URL
          window.location.href = data.authorizationUrl;
        } else {
          // Open in popup
          const width = 600;
          const height = 800;
          const left = window.screenX + (window.outerWidth - width) / 2;
          const top = window.screenY + (window.outerHeight - height) / 2;
          const popup = window.open(
            data.authorizationUrl,
            "MorphConnect",
            `width=${width},height=${height},left=${left},top=${top}`
          );

          // Check connection status when popup closes
          const checkConnection = async () => {
            if (popup?.closed) {
              const { data: connectionData, error: connectionError } =
                await connection.retrieve();

              if (!connectionError && connectionData) {
                // Update parent component state
                connectionCallbacks?.onConnectionDataChange?.(connectionData);
                // Trigger authorized callback
                connectionCallbacks?.authorized?.(connectionData);
              } else if (connectionError) {
                connectionCallbacks?.onError?.(connectionError);
              }
              // Remove interval once we've checked
              clearInterval(popupChecker);
            }
          };

          // Check every second if the popup is closed
          const popupChecker = setInterval(checkConnection, 1000);
        }
      }
    } else if (action === "delete") {
      // Update parent component state to show unauthorized
      connectionCallbacks?.onConnectionDataChange?.({ status: "unauthorized" });
    }
  };

  if (!isValidElement(children)) {
    throw new Error("ConnectTrigger children must be a valid React element");
  }

  return cloneElement(children, {
    onClick: async (e: React.MouseEvent<T>) => {
      children.props.onClick?.(e);
      await onClick();
    },
  });
}

const Authorize = <T = HTMLElement,>(props: ConnectTriggerProps<T>) => (
  <BaseTrigger<T> {...props} action="authorize" />
);

const Delete = <T = HTMLElement,>(props: ConnectTriggerProps<T>) => (
  <BaseTrigger<T> {...props} action="delete" />
);

export const ConnectTrigger = {
  Authorize,
  Delete,
};
