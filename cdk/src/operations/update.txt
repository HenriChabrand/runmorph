import { Operation, Metadata, Error, ErrorType } from './operation'; // Added Error and ErrorTypes import
import { Model, Raw } from '../models';
import { ResourceEvent } from '../resources';
import { Runtime } from '../runtime';

type Input<M extends Model> = { 
    id: string;
    parents?: {
       [key: string]: string;
    }; 
    data: Raw<M>;
    remote_fields: Record<string,any>;
};

type Output<M extends Model> = ResourceEvent<M>; 

export class Update<M extends Model> extends Operation<Model>{
    private model: new () => M;    
    private handler: (runtime:Runtime, data:Input<M> ) =>  Promise<Output<M>>; 

    constructor(handler: (runtime:Runtime, data:Input<M>) => Promise<Output<M>>, metadata:Metadata<M>) {
        super({
            id:'update',
            trigger:'updated',
            scopes: metadata?.scopes || []
        });    
        this.model = metadata.model;
        this.handler = handler;      
    }

    async run(runtime:Runtime, data: Input<M>): Promise<Output<M>|Error> { 
        try{
            const output = await this.handler(runtime, data);
            if (output instanceof Error) {
                return output; 
            } 

            const resource: ResourceEvent<M> = output;
            resource.trigger = 'updated';
            return resource; 

        } catch (error) {
            console.log(error)
            // If an error is thrown, catch it and return as an Error object
            return error instanceof Error ? error : new Error(ErrorType.UNKNOWN_ERROR, String(error))
        }
    }
}